// Generated by CoffeeScript 1.6.3
var CoffeeScript, format_error, history, inspect, node_repl, util, vm, writer, _,
  __slice = [].slice;

node_repl = require('repl');

CoffeeScript = require('coffee-script');

vm = require('vm');

_ = require('underscore');

util = require('util');

history = require('repl.history');

_.mixin({
  map_values: function(obj, f_val) {
    return _.object(_.map(obj, function(val, key) {
      return [key, f_val(val, key)];
    }));
  }
});

inspect = function(val) {
  var _ref;
  val = (_ref = val != null ? typeof val.toObject === "function" ? val.toObject() : void 0 : void 0) != null ? _ref : val;
  return util.inspect(val, {
    depth: null,
    colors: true
  });
};

writer = function(val) {
  if (_.isArray(val)) {
    return "[" + (_.map(val, inspect).join(',\n')) + "]";
  } else {
    return inspect(val);
  }
};

format_error = function(err) {
  var name;
  name = err.name === 'SyntaxError' ? 'Syntax Error' : err.name;
  return "" + name + ": " + err.message;
};

module.exports.run = function(schemas, mongoose, mongo_uri) {
  var conn, models, options;
  console.log("Connecting to: " + mongo_uri);
  conn = mongoose.createConnection(mongo_uri);
  models = _.map_values(schemas, function(schema, name) {
    schema.__proto__ = mongoose.Schema.prototype;
    return conn.model(name, schema);
  });
  options = {
    useColors: true,
    writer: writer,
    "eval": function(cmd, context, filename, cb) {
      var err, js, res;
      cmd = cmd.replace(/^\(([\s\S]*)\n\)$/m, '$1');
      try {
        js = CoffeeScript.compile(cmd, {
          bare: true
        });
        res = vm.runInContext(js, context, filename);
      } catch (_error) {
        err = _error;
        return cb(format_error(err));
      }
      if (res instanceof mongoose.Query) {
        return res.setOptions({
          slaveOk: true
        }).exec(function(err, doc) {
          return cb(err, doc);
        });
      } else {
        return cb(null, res);
      }
    }
  };
  return conn.once('open', function() {
    var repl;
    console.log("Using db: " + conn.name);
    console.log(_.isEmpty(models) ? "No models loaded" : "Loaded models: " + (_.keys(models).join(', ')));
    repl = node_repl.start(options);
    _.extend(repl.context, models);
    _.extend(repl.context, {
      conn: conn,
      ObjectId: conn.base.Types.ObjectId,
      inspect: function() {
        var val;
        val = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return console.log(_.map(val, inspect).join(', '));
      }
    });
    history(repl, "" + process.env.HOME + "/.mongoose_history");
    return repl.on('exit', function() {
      repl.outputStream.write('\n');
      return process.exit();
    });
  });
};
