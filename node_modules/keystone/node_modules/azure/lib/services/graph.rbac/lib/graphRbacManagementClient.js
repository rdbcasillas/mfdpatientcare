/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var GraphRbacManagementClient = ( /** @lends GraphRbacManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the GraphRbacManagementClient class.
   * @constructor
   * 
   * @param {string} tenantID Gets or sets the tenant Id.
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function GraphRbacManagementClient(tenantID, credentials, baseUri, filters) {
    if (tenantID === null || tenantID === undefined) {
      throw new Error('tenantID cannot be null.');
    }
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    GraphRbacManagementClient['super_'].call(this, credentials, filters);
    
    this.tenantID = tenantID;
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://graph.windows.net/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '1.42-previewInternal';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [GroupOperations](-GroupOperations.html)
     * object.
     * @type {object}
     */
    this.group = new GroupOperations(this);
    /**
     * Provides an instance of the [ObjectOperations](-ObjectOperations.html)
     * object.
     * @type {object}
     */
    this.objects = new ObjectOperations(this);
    /**
     * Provides an instance of the
     * [ServicePrincipalOperations](-ServicePrincipalOperations.html) object.
     * @type {object}
     */
    this.servicePrincipal = new ServicePrincipalOperations(this);
    /**
     * Provides an instance of the [UserOperations](-UserOperations.html)
     * object.
     * @type {object}
     */
    this.user = new UserOperations(this);
  }
  
  util.inherits(GraphRbacManagementClient, Service);
  
  
  return GraphRbacManagementClient;
})();
exports.GraphRbacManagementClient = GraphRbacManagementClient;

var GroupOperations = ( /** @lends GroupOperations */ function() {
  /**
   * @class
   * Operations for working with Groups in Azure Active Directory Graph API.
   * (see http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [GraphRbacManagementClient] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient}.
   * See [group] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient#group}.
   * Initializes a new instance of the GroupOperations class.
   * @constructor
   * 
   * @param {GraphRbacManagementClient} client Reference to the service client.
   */
  function GroupOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets group information from the directory.
   * 
   * @param {string} objectId User objectId to get group information.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GroupOperations.prototype.get = function(objectId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (objectId === null || objectId === undefined) {
      return callback(new Error('objectId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/groups/' + objectId.trim() + '?';
    url2 = url2 + 'api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var groupInstance = {};
        result.group = groupInstance;
        
        var objectIdValue = responseDoc['objectId'];
        if (objectIdValue) {
          var objectIdInstance = objectIdValue;
          groupInstance.objectId = objectIdInstance;
        }
        
        var objectTypeValue = responseDoc['objectType'];
        if (objectTypeValue) {
          var objectTypeInstance = objectTypeValue;
          groupInstance.objectType = objectTypeInstance;
        }
        
        var displayNameValue = responseDoc['displayName'];
        if (displayNameValue) {
          var displayNameInstance = displayNameValue;
          groupInstance.displayName = displayNameInstance;
        }
        
        var securityEnabledValue = responseDoc['securityEnabled'];
        if (securityEnabledValue) {
          var securityEnabledInstance = securityEnabledValue;
          groupInstance.securityEnabled = securityEnabledInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the members of a group.
   * 
   * @param {string} objectId Group object Id who's members should be retrieved.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GroupOperations.prototype.getGroupMembers = function(objectId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (objectId === null || objectId === undefined) {
      return callback(new Error('objectId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/groups/' + objectId.trim() + '/members?';
    url2 = url2 + 'api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { aADObject: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var aADObjectInstance = {};
            result.aADObject.push(aADObjectInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              aADObjectInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              aADObjectInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              aADObjectInstance.displayName = displayNameInstance;
            }
            
            var userPrincipalNameValue = valueValue['userPrincipalName'];
            if (userPrincipalNameValue) {
              var userPrincipalNameInstance = userPrincipalNameValue;
              aADObjectInstance.userPrincipalName = userPrincipalNameInstance;
            }
            
            var mailValue = valueValue['mail'];
            if (mailValue) {
              var mailInstance = mailValue;
              aADObjectInstance.mail = mailInstance;
            }
            
            var mailEnabledValue = valueValue['mailEnabled'];
            if (mailEnabledValue) {
              var mailEnabledInstance = mailEnabledValue;
              aADObjectInstance.mailEnabled = mailEnabledInstance;
            }
            
            var securityEnabledValue = valueValue['securityEnabled'];
            if (securityEnabledValue) {
              var securityEnabledInstance = securityEnabledValue;
              aADObjectInstance.securityEnabled = securityEnabledInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets next set of members of a group.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * GetGroupMembers or GetGroupMembersNext.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GroupOperations.prototype.getGroupMembersNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/' + nextLink.trim();
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { aADObject: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var aADObjectInstance = {};
            result.aADObject.push(aADObjectInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              aADObjectInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              aADObjectInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              aADObjectInstance.displayName = displayNameInstance;
            }
            
            var userPrincipalNameValue = valueValue['userPrincipalName'];
            if (userPrincipalNameValue) {
              var userPrincipalNameInstance = userPrincipalNameValue;
              aADObjectInstance.userPrincipalName = userPrincipalNameInstance;
            }
            
            var mailValue = valueValue['mail'];
            if (mailValue) {
              var mailInstance = mailValue;
              aADObjectInstance.mail = mailInstance;
            }
            
            var mailEnabledValue = valueValue['mailEnabled'];
            if (mailEnabledValue) {
              var mailEnabledInstance = mailEnabledValue;
              aADObjectInstance.mailEnabled = mailEnabledInstance;
            }
            
            var securityEnabledValue = valueValue['securityEnabled'];
            if (securityEnabledValue) {
              var securityEnabledInstance = securityEnabledValue;
              aADObjectInstance.securityEnabled = securityEnabledInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a collection that contains the Object IDs of the groups of which the
   * group is a member.
   * 
   * @param {GroupGetMemberGroupsParameters} parameters Group filtering
   * parameters.
   * 
   * @param {string} parameters.objectId Group object Id
   * 
   * @param {boolean} parameters.securityEnabledOnly If true only membership in
   * security enabled groups should be checked. Otherwise membership in all
   * groups should be checked
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GroupOperations.prototype.getMemberGroups = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.objectId === null || parameters.objectId === undefined) {
      return callback(new Error('parameters.objectId cannot be null.'));
    }
    if (parameters.securityEnabledOnly === null || parameters.securityEnabledOnly === undefined) {
      return callback(new Error('parameters.securityEnabledOnly cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/groups/' + parameters.objectId.trim() + '/getMemberGroups?';
    url2 = url2 + 'api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    requestDoc = {};
    requestDoc['securityEnabledOnly'] = parameters.securityEnabledOnly;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { objectIds: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            result.objectIds.push(valueValue);
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets list of groups for the current tenant.
   * 
   * @param {string} [mail] Email to filter results.
   * 
   * @param {string} [displayNameStartsWith] Display name to filter results.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GroupOperations.prototype.list = function(mail, displayNameStartsWith, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/groups?';
    var appendFilter = true;
    if (mail) {
      appendFilter = false;
      url2 = url2 + '$filter=' + 'mail eq \'' + encodeURIComponent(mail ? mail.trim() : '') + '\'';
    }
    if (displayNameStartsWith) {
      url2 = url2 + '&$filter=startswith(displayName,\'' + encodeURIComponent(displayNameStartsWith ? displayNameStartsWith.trim() : '') + '\')';
    }
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { groups: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var groupInstance = {};
            result.groups.push(groupInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              groupInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              groupInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              groupInstance.displayName = displayNameInstance;
            }
            
            var securityEnabledValue = valueValue['securityEnabled'];
            if (securityEnabledValue) {
              var securityEnabledInstance = securityEnabledValue;
              groupInstance.securityEnabled = securityEnabledInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets list of groups for the current tenant.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  GroupOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/' + nextLink.trim();
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { groups: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var groupInstance = {};
            result.groups.push(groupInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              groupInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              groupInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              groupInstance.displayName = displayNameInstance;
            }
            
            var securityEnabledValue = valueValue['securityEnabled'];
            if (securityEnabledValue) {
              var securityEnabledInstance = securityEnabledValue;
              groupInstance.securityEnabled = securityEnabledInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return GroupOperations;
})();

var ObjectOperations = ( /** @lends ObjectOperations */ function() {
  /**
   * @class
   * Operations for working with Objects in Azure AD Graph API.  (see
   * http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for more
   * information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [GraphRbacManagementClient] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient}.
   * See [objects] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient#objects}.
   * Initializes a new instance of the ObjectOperations class.
   * @constructor
   * 
   * @param {GraphRbacManagementClient} client Reference to the service client.
   */
  function ObjectOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets AD group membership by provided AD object Ids
   * 
   * @param {GetObjectsParameters} parameters Objects filtering parameters.
   * 
   * @param {array} [parameters.ids] Requested object Ids
   * 
   * @param {array} [parameters.types] Requested object types
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ObjectOperations.prototype.getObjectsByObjectIds = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/getObjectsByObjectIds?api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var getObjectsParametersValue = {};
    requestDoc = getObjectsParametersValue;
    
    if (parameters.ids) {
      var objectIdsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.ids.length; loweredIndex1 = loweredIndex1 + 1) {
        var objectIdsItem = parameters.ids[loweredIndex1];
        objectIdsArray.push(objectIdsItem);
      }
      getObjectsParametersValue['objectIds'] = objectIdsArray;
    }
    
    if (parameters.types) {
      var typesArray = [];
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.types.length; loweredIndex2 = loweredIndex2 + 1) {
        var typesItem = parameters.types[loweredIndex2];
        typesArray.push(typesItem);
      }
      getObjectsParametersValue['types'] = typesArray;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { aADObject: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex3 = 0; loweredIndex3 < valueArray.length; loweredIndex3 = loweredIndex3 + 1) {
            var valueValue = valueArray[loweredIndex3];
            var aADObjectInstance = {};
            result.aADObject.push(aADObjectInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              aADObjectInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              aADObjectInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              aADObjectInstance.displayName = displayNameInstance;
            }
            
            var userPrincipalNameValue = valueValue['userPrincipalName'];
            if (userPrincipalNameValue) {
              var userPrincipalNameInstance = userPrincipalNameValue;
              aADObjectInstance.userPrincipalName = userPrincipalNameInstance;
            }
            
            var mailValue = valueValue['mail'];
            if (mailValue) {
              var mailInstance = mailValue;
              aADObjectInstance.mail = mailInstance;
            }
            
            var mailEnabledValue = valueValue['mailEnabled'];
            if (mailEnabledValue) {
              var mailEnabledInstance = mailEnabledValue;
              aADObjectInstance.mailEnabled = mailEnabledInstance;
            }
            
            var securityEnabledValue = valueValue['securityEnabled'];
            if (securityEnabledValue) {
              var securityEnabledInstance = securityEnabledValue;
              aADObjectInstance.securityEnabled = securityEnabledInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ObjectOperations;
})();

var ServicePrincipalOperations = ( /** @lends ServicePrincipalOperations */ function() {
  /**
   * @class
   * Operations for working with service principal in Azure Active Directory
   * Graph API.  (see
   * http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for more
   * information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [GraphRbacManagementClient] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient}.
   * See [servicePrincipal] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient#servicePrincipal}.
   * Initializes a new instance of the ServicePrincipalOperations class.
   * @constructor
   * 
   * @param {GraphRbacManagementClient} client Reference to the service client.
   */
  function ServicePrincipalOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets service principal information from the directory.
   * 
   * @param {string} objectId Object id to get service principal information.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServicePrincipalOperations.prototype.get = function(objectId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (objectId === null || objectId === undefined) {
      return callback(new Error('objectId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/servicePrincipals/' + objectId.trim() + '?';
    url2 = url2 + 'api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var servicePrincipalInstance = { servicePrincipalNames: [] };
        result.servicePrincipal = servicePrincipalInstance;
        
        var objectIdValue = responseDoc['objectId'];
        if (objectIdValue) {
          var objectIdInstance = objectIdValue;
          servicePrincipalInstance.objectId = objectIdInstance;
        }
        
        var objectTypeValue = responseDoc['objectType'];
        if (objectTypeValue) {
          var objectTypeInstance = objectTypeValue;
          servicePrincipalInstance.objectType = objectTypeInstance;
        }
        
        var displayNameValue = responseDoc['displayName'];
        if (displayNameValue) {
          var displayNameInstance = displayNameValue;
          servicePrincipalInstance.displayName = displayNameInstance;
        }
        
        var appIdValue = responseDoc['appId'];
        if (appIdValue) {
          var appIdInstance = appIdValue;
          servicePrincipalInstance.appId = appIdInstance;
        }
        
        var servicePrincipalNamesArray = responseDoc['servicePrincipalNames'];
        if (servicePrincipalNamesArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < servicePrincipalNamesArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var servicePrincipalNamesValue = servicePrincipalNamesArray[loweredIndex1];
            servicePrincipalInstance.servicePrincipalNames.push(servicePrincipalNamesValue);
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets service principal information from the directory.
   * 
   * @param {string} servicePrincipalName filter based on service principal name
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServicePrincipalOperations.prototype.getByServicePrincipalName = function(servicePrincipalName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (servicePrincipalName === null || servicePrincipalName === undefined) {
      return callback(new Error('servicePrincipalName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/servicePrincipals?';
    var appendFilter = true;
    appendFilter = false;
    url2 = url2 + '$filter=' + 'servicePrincipalNames/any(c:c eq \'' + encodeURIComponent(servicePrincipalName.trim()) + '\')';
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { servicePrincipals: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var servicePrincipalInstance = { servicePrincipalNames: [] };
            result.servicePrincipals.push(servicePrincipalInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              servicePrincipalInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              servicePrincipalInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              servicePrincipalInstance.displayName = displayNameInstance;
            }
            
            var appIdValue = valueValue['appId'];
            if (appIdValue) {
              var appIdInstance = appIdValue;
              servicePrincipalInstance.appId = appIdInstance;
            }
            
            var servicePrincipalNamesArray = valueValue['servicePrincipalNames'];
            if (servicePrincipalNamesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < servicePrincipalNamesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var servicePrincipalNamesValue = servicePrincipalNamesArray[loweredIndex2];
                servicePrincipalInstance.servicePrincipalNames.push(servicePrincipalNamesValue);
              }
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets list of service principals from the current tenant.
   * 
   * @param {string} [displayNameStartsWith] Display name to filter results.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServicePrincipalOperations.prototype.list = function(displayNameStartsWith, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/servicePrincipals?';
    var appendFilter = true;
    if (displayNameStartsWith) {
      appendFilter = false;
      url2 = url2 + '$filter=' + 'startswith(displayName,\'' + encodeURIComponent(displayNameStartsWith ? displayNameStartsWith.trim() : '') + '\')';
    }
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { servicePrincipals: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var servicePrincipalInstance = { servicePrincipalNames: [] };
            result.servicePrincipals.push(servicePrincipalInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              servicePrincipalInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              servicePrincipalInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              servicePrincipalInstance.displayName = displayNameInstance;
            }
            
            var appIdValue = valueValue['appId'];
            if (appIdValue) {
              var appIdInstance = appIdValue;
              servicePrincipalInstance.appId = appIdInstance;
            }
            
            var servicePrincipalNamesArray = valueValue['servicePrincipalNames'];
            if (servicePrincipalNamesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < servicePrincipalNamesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var servicePrincipalNamesValue = servicePrincipalNamesArray[loweredIndex2];
                servicePrincipalInstance.servicePrincipalNames.push(servicePrincipalNamesValue);
              }
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets list of service principals for the current tenant.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServicePrincipalOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/' + nextLink.trim();
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { servicePrincipals: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var servicePrincipalInstance = { servicePrincipalNames: [] };
            result.servicePrincipals.push(servicePrincipalInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              servicePrincipalInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              servicePrincipalInstance.objectType = objectTypeInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              servicePrincipalInstance.displayName = displayNameInstance;
            }
            
            var appIdValue = valueValue['appId'];
            if (appIdValue) {
              var appIdInstance = appIdValue;
              servicePrincipalInstance.appId = appIdInstance;
            }
            
            var servicePrincipalNamesArray = valueValue['servicePrincipalNames'];
            if (servicePrincipalNamesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < servicePrincipalNamesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var servicePrincipalNamesValue = servicePrincipalNamesArray[loweredIndex2];
                servicePrincipalInstance.servicePrincipalNames.push(servicePrincipalNamesValue);
              }
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ServicePrincipalOperations;
})();

var UserOperations = ( /** @lends UserOperations */ function() {
  /**
   * @class
   * Operations for working with Users in Azure Active Directory Graph API.
   * (see http://msdn.microsoft.com/en-us/library/azure/hh974476.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [GraphRbacManagementClient] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient}.
   * See [user] {@link
   * GraphRbacManagementClient~GraphRbacManagementClient#user}.
   * Initializes a new instance of the UserOperations class.
   * @constructor
   * 
   * @param {GraphRbacManagementClient} client Reference to the service client.
   */
  function UserOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets user information from the directory.
   * 
   * @param {string} objectId User objectId or userPrincipalName to get user
   * information.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  UserOperations.prototype.get = function(objectId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (objectId === null || objectId === undefined) {
      return callback(new Error('objectId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/users/' + objectId.trim() + '?';
    url2 = url2 + 'api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var userInstance = {};
        result.user = userInstance;
        
        var objectIdValue = responseDoc['objectId'];
        if (objectIdValue) {
          var objectIdInstance = objectIdValue;
          userInstance.objectId = objectIdInstance;
        }
        
        var objectTypeValue = responseDoc['objectType'];
        if (objectTypeValue) {
          var objectTypeInstance = objectTypeValue;
          userInstance.objectType = objectTypeInstance;
        }
        
        var userPrincipalNameValue = responseDoc['userPrincipalName'];
        if (userPrincipalNameValue) {
          var userPrincipalNameInstance = userPrincipalNameValue;
          userInstance.userPrincipalName = userPrincipalNameInstance;
        }
        
        var displayNameValue = responseDoc['displayName'];
        if (displayNameValue) {
          var displayNameInstance = displayNameValue;
          userInstance.displayName = displayNameInstance;
        }
        
        var signInNameValue = responseDoc['signInName'];
        if (signInNameValue) {
          var signInNameInstance = signInNameValue;
          userInstance.signInName = signInNameInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets user information from the directory.
   * 
   * @param {string} signInName filter based on sign in name
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  UserOperations.prototype.getBySignInName = function(signInName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (signInName === null || signInName === undefined) {
      return callback(new Error('signInName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/users?';
    var appendFilter = true;
    appendFilter = false;
    url2 = url2 + '$filter=' + 'signInName eq \'' + encodeURIComponent(signInName.trim()) + '\'';
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { users: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var userInstance = {};
            result.users.push(userInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              userInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              userInstance.objectType = objectTypeInstance;
            }
            
            var userPrincipalNameValue = valueValue['userPrincipalName'];
            if (userPrincipalNameValue) {
              var userPrincipalNameInstance = userPrincipalNameValue;
              userInstance.userPrincipalName = userPrincipalNameInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              userInstance.displayName = displayNameInstance;
            }
            
            var signInNameValue = valueValue['signInName'];
            if (signInNameValue) {
              var signInNameInstance = signInNameValue;
              userInstance.signInName = signInNameInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a collection that contains the Object IDs of the groups of which the
   * user is a member.
   * 
   * @param {UserGetMemberGroupsParameters} parameters User filtering
   * parameters.
   * 
   * @param {string} parameters.objectId User object Id
   * 
   * @param {boolean} parameters.securityEnabledOnly If true only membership in
   * security enabled groups should be checked. Otherwise membership in all
   * groups should be checked
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  UserOperations.prototype.getMemberGroups = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.objectId === null || parameters.objectId === undefined) {
      return callback(new Error('parameters.objectId cannot be null.'));
    }
    if (parameters.securityEnabledOnly === null || parameters.securityEnabledOnly === undefined) {
      return callback(new Error('parameters.securityEnabledOnly cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/users/' + parameters.objectId.trim() + '/getMemberGroups?';
    url2 = url2 + 'api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    requestDoc = {};
    requestDoc['securityEnabledOnly'] = parameters.securityEnabledOnly;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { objectIds: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            result.objectIds.push(valueValue);
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets list of users for the current tenant.
   * 
   * @param {string} [mail] Email to filter results.
   * 
   * @param {string} [displayNameStartsWith] Display name to filter results.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  UserOperations.prototype.list = function(mail, displayNameStartsWith, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/users?';
    var appendFilter = true;
    if (mail) {
      appendFilter = false;
      url2 = url2 + '$filter=' + 'mail eq \'' + encodeURIComponent(mail ? mail.trim() : '') + '\'';
    }
    if (displayNameStartsWith) {
      url2 = url2 + '&$filter=startswith(displayName,\'' + encodeURIComponent(displayNameStartsWith ? displayNameStartsWith.trim() : '') + '\')';
    }
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { users: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var userInstance = {};
            result.users.push(userInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              userInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              userInstance.objectType = objectTypeInstance;
            }
            
            var userPrincipalNameValue = valueValue['userPrincipalName'];
            if (userPrincipalNameValue) {
              var userPrincipalNameInstance = userPrincipalNameValue;
              userInstance.userPrincipalName = userPrincipalNameInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              userInstance.displayName = displayNameInstance;
            }
            
            var signInNameValue = valueValue['signInName'];
            if (signInNameValue) {
              var signInNameInstance = signInNameValue;
              userInstance.signInName = signInNameInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets list of users for the current tenant.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  UserOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + this.client.tenantID.trim() + '/' + nextLink.trim();
    url2 = url2 + '&api-version=1.42-previewInternal';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { users: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var userInstance = {};
            result.users.push(userInstance);
            
            var objectIdValue = valueValue['objectId'];
            if (objectIdValue) {
              var objectIdInstance = objectIdValue;
              userInstance.objectId = objectIdInstance;
            }
            
            var objectTypeValue = valueValue['objectType'];
            if (objectTypeValue) {
              var objectTypeInstance = objectTypeValue;
              userInstance.objectType = objectTypeInstance;
            }
            
            var userPrincipalNameValue = valueValue['userPrincipalName'];
            if (userPrincipalNameValue) {
              var userPrincipalNameInstance = userPrincipalNameValue;
              userInstance.userPrincipalName = userPrincipalNameInstance;
            }
            
            var displayNameValue = valueValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              userInstance.displayName = displayNameInstance;
            }
            
            var signInNameValue = valueValue['signInName'];
            if (signInNameValue) {
              var signInNameInstance = signInNameValue;
              userInstance.signInName = signInNameInstance;
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.nextLink = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return UserOperations;
})();
