/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var AuthorizationManagementClient = ( /** @lends AuthorizationManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the AuthorizationManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function AuthorizationManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    AuthorizationManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-07-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [PermissionOperations](-PermissionOperations.html) object.
     * @type {object}
     */
    this.permissions = new PermissionOperations(this);
    /**
     * Provides an instance of the
     * [RoleAssignmentOperations](-RoleAssignmentOperations.html) object.
     * @type {object}
     */
    this.roleAssignments = new RoleAssignmentOperations(this);
    /**
     * Provides an instance of the
     * [RoleDefinitionOperations](-RoleDefinitionOperations.html) object.
     * @type {object}
     */
    this.roleDefinitions = new RoleDefinitionOperations(this);
  }
  
  util.inherits(AuthorizationManagementClient, Service);
  
  
  return AuthorizationManagementClient;
})();
exports.AuthorizationManagementClient = AuthorizationManagementClient;

var PermissionOperations = ( /** @lends PermissionOperations */ function() {
  /**
   * @class
   * Get resource or resource group permissions  (see http://TBD for more
   * information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AuthorizationManagementClient] {@link
   * AuthorizationManagementClient~AuthorizationManagementClient}.
   * See [permissions] {@link
   * AuthorizationManagementClient~AuthorizationManagementClient#permissions}.
   * Initializes a new instance of the PermissionOperations class.
   * @constructor
   * 
   * @param {AuthorizationManagementClient} client Reference to the service
   * client.
   */
  function PermissionOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets a resource permissions.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PermissionOperations.prototype.listForResource = function(resourceGroupName, identity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/' + identity.resourceProviderNamespace.trim() + '/' + (identity.parentResourcePath ? identity.parentResourcePath.trim() : '') + '/' + identity.resourceType.trim() + '/' + identity.resourceName.trim() + '/providers/Microsoft.Authorization/permissions?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { permissions: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var permissionInstance = { actions: [], notActions: [] };
            result.permissions.push(permissionInstance);
            
            var actionsArray = valueValue['actions'];
            if (actionsArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < actionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var actionsValue = actionsArray[loweredIndex2];
                permissionInstance.actions.push(actionsValue);
              }
            }
            
            var notActionsArray = valueValue['notActions'];
            if (notActionsArray) {
              for (var loweredIndex3 = 0; loweredIndex3 < notActionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var notActionsValue = notActionsArray[loweredIndex3];
                permissionInstance.notActions.push(notActionsValue);
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a resource group permissions.
   * 
   * @param {string} resourceGroupName Name of the resource group to get the
   * permissions for.The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PermissionOperations.prototype.listForResourceGroup = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/Microsoft.Authorization/permissions?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { permissions: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var permissionInstance = { actions: [], notActions: [] };
            result.permissions.push(permissionInstance);
            
            var actionsArray = valueValue['actions'];
            if (actionsArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < actionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var actionsValue = actionsArray[loweredIndex2];
                permissionInstance.actions.push(actionsValue);
              }
            }
            
            var notActionsArray = valueValue['notActions'];
            if (notActionsArray) {
              for (var loweredIndex3 = 0; loweredIndex3 < notActionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var notActionsValue = notActionsArray[loweredIndex3];
                permissionInstance.notActions.push(notActionsValue);
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return PermissionOperations;
})();

var RoleAssignmentOperations = ( /** @lends RoleAssignmentOperations */ function() {
  /**
   * @class
   * TBD  (see http://TBD for more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AuthorizationManagementClient] {@link
   * AuthorizationManagementClient~AuthorizationManagementClient}.
   * See [roleAssignments] {@link
   * AuthorizationManagementClient~AuthorizationManagementClient#roleAssignments}.
   * Initializes a new instance of the RoleAssignmentOperations class.
   * @constructor
   * 
   * @param {AuthorizationManagementClient} client Reference to the service
   * client.
   */
  function RoleAssignmentOperations(client) {
    this.client = client;
  }
  
  /**
   * Create role assignment.
   * 
   * @param {string} scope Scope.
   * 
   * @param {Guid} roleAssignmentName Role assignment name.
   * 
   * @param {RoleAssignmentCreateParameters} parameters Role assignment.
   * 
   * @param {string} [parameters.roleDefinitionId] Gets or sets role definition
   * id.
   * 
   * @param {Guid} parameters.principalId Gets or sets principal Id.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.create = function(scope, roleAssignmentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (scope === null || scope === undefined) {
      return callback(new Error('scope cannot be null.'));
    }
    if (roleAssignmentName === null || roleAssignmentName === undefined) {
      return callback(new Error('roleAssignmentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.principalId === null || parameters.principalId === undefined) {
      return callback(new Error('parameters.principalId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + scope.trim() + '/providers/Microsoft.Authorization/roleAssignments/' + roleAssignmentName + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = {};
    requestDoc['properties'] = propertiesValue;
    
    if (parameters.roleDefinitionId) {
      propertiesValue['roleDefinitionId'] = parameters.roleDefinitionId;
    }
    
    propertiesValue['principalId'] = parameters.principalId;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleAssignmentInstance = {};
        result.roleAssignment = roleAssignmentInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          roleAssignmentInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleAssignmentInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          roleAssignmentInstance.type = typeInstance;
        }
        
        var propertiesValue2 = responseDoc['properties'];
        if (propertiesValue2) {
          var propertiesInstance = {};
          roleAssignmentInstance.properties = propertiesInstance;
          
          var roleDefinitionIdValue = propertiesValue2['roleDefinitionId'];
          if (roleDefinitionIdValue) {
            var roleDefinitionIdInstance = roleDefinitionIdValue;
            propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
          }
          
          var principalIdValue = propertiesValue2['principalId'];
          if (principalIdValue) {
            var principalIdInstance = principalIdValue;
            propertiesInstance.principalId = principalIdInstance;
          }
          
          var scopeValue = propertiesValue2['scope'];
          if (scopeValue) {
            var scopeInstance = scopeValue;
            propertiesInstance.scope = scopeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Create role assignment by Id.
   * 
   * @param {string} roleAssignmentId Role assignment Id
   * 
   * @param {RoleAssignmentCreateParameters} parameters Role assignment.
   * 
   * @param {string} [parameters.roleDefinitionId] Gets or sets role definition
   * id.
   * 
   * @param {Guid} parameters.principalId Gets or sets principal Id.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.createById = function(roleAssignmentId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleAssignmentId === null || roleAssignmentId === undefined) {
      return callback(new Error('roleAssignmentId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.principalId === null || parameters.principalId === undefined) {
      return callback(new Error('parameters.principalId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + roleAssignmentId.trim() + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = {};
    requestDoc['properties'] = propertiesValue;
    
    if (parameters.roleDefinitionId) {
      propertiesValue['roleDefinitionId'] = parameters.roleDefinitionId;
    }
    
    propertiesValue['principalId'] = parameters.principalId;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleAssignmentInstance = {};
        result.roleAssignment = roleAssignmentInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          roleAssignmentInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleAssignmentInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          roleAssignmentInstance.type = typeInstance;
        }
        
        var propertiesValue2 = responseDoc['properties'];
        if (propertiesValue2) {
          var propertiesInstance = {};
          roleAssignmentInstance.properties = propertiesInstance;
          
          var roleDefinitionIdValue = propertiesValue2['roleDefinitionId'];
          if (roleDefinitionIdValue) {
            var roleDefinitionIdInstance = roleDefinitionIdValue;
            propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
          }
          
          var principalIdValue = propertiesValue2['principalId'];
          if (principalIdValue) {
            var principalIdInstance = principalIdValue;
            propertiesInstance.principalId = principalIdInstance;
          }
          
          var scopeValue = propertiesValue2['scope'];
          if (scopeValue) {
            var scopeInstance = scopeValue;
            propertiesInstance.scope = scopeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Delete role assignment.
   * 
   * @param {string} scope Scope.
   * 
   * @param {Guid} roleAssignmentName Role assignment name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.delete = function(scope, roleAssignmentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (scope === null || scope === undefined) {
      return callback(new Error('scope cannot be null.'));
    }
    if (roleAssignmentName === null || roleAssignmentName === undefined) {
      return callback(new Error('roleAssignmentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + scope.trim() + '/providers/Microsoft.Authorization/roleAssignments/' + roleAssignmentName + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Delete role assignment.
   * 
   * @param {string} roleAssignmentId Role assignment Id
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.deleteById = function(roleAssignmentId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleAssignmentId === null || roleAssignmentId === undefined) {
      return callback(new Error('roleAssignmentId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + roleAssignmentId.trim() + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get single role assignment.
   * 
   * @param {string} scope Scope.
   * 
   * @param {Guid} roleAssignmentName Role assignment name.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.get = function(scope, roleAssignmentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (scope === null || scope === undefined) {
      return callback(new Error('scope cannot be null.'));
    }
    if (roleAssignmentName === null || roleAssignmentName === undefined) {
      return callback(new Error('roleAssignmentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + scope.trim() + '/providers/Microsoft.Authorization/roleAssignments/' + roleAssignmentName + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleAssignmentInstance = {};
        result.roleAssignment = roleAssignmentInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          roleAssignmentInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleAssignmentInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          roleAssignmentInstance.type = typeInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          roleAssignmentInstance.properties = propertiesInstance;
          
          var roleDefinitionIdValue = propertiesValue['roleDefinitionId'];
          if (roleDefinitionIdValue) {
            var roleDefinitionIdInstance = roleDefinitionIdValue;
            propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
          }
          
          var principalIdValue = propertiesValue['principalId'];
          if (principalIdValue) {
            var principalIdInstance = principalIdValue;
            propertiesInstance.principalId = principalIdInstance;
          }
          
          var scopeValue = propertiesValue['scope'];
          if (scopeValue) {
            var scopeInstance = scopeValue;
            propertiesInstance.scope = scopeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get single role assignment.
   * 
   * @param {string} roleAssignmentId Role assignment Id
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.getById = function(roleAssignmentId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleAssignmentId === null || roleAssignmentId === undefined) {
      return callback(new Error('roleAssignmentId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + roleAssignmentId.trim() + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleAssignmentInstance = {};
        result.roleAssignment = roleAssignmentInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          roleAssignmentInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleAssignmentInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          roleAssignmentInstance.type = typeInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          roleAssignmentInstance.properties = propertiesInstance;
          
          var roleDefinitionIdValue = propertiesValue['roleDefinitionId'];
          if (roleDefinitionIdValue) {
            var roleDefinitionIdInstance = roleDefinitionIdValue;
            propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
          }
          
          var principalIdValue = propertiesValue['principalId'];
          if (principalIdValue) {
            var principalIdInstance = principalIdValue;
            propertiesInstance.principalId = principalIdInstance;
          }
          
          var scopeValue = propertiesValue['scope'];
          if (scopeValue) {
            var scopeInstance = scopeValue;
            propertiesInstance.scope = scopeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets role assignments of the subscription.
   * 
   * @param {ListAssignmentsFilterParameters} [parametersOrCallback] List
   * operation filters. If null will return all role assignments at, above or
   * below the subscription.
   * 
   * @param {Guid} [parametersOrCallback.principalId] Returns role assignment
   * of the specific principal.
   * 
   * @param {boolean} [parametersOrCallback.atScope] This returns all role
   * assignments at or above.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.list = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters) {
      if (parameters.atScope === null || parameters.atScope === undefined) {
        return callback(new Error('parameters.atScope cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/providers/Microsoft.Authorization/roleAssignments?';
    var appendFilter = true;
    if (parameters && parameters.atScope === true) {
      appendFilter = false;
      url2 = url2 + '$filter=atScope()';
    }
    if (parameters && parameters.principalId) {
      url2 = url2 + '&$filter=principalId eq \'' + encodeURIComponent(parameters.principalId) + '\'';
    }
    url2 = url2 + '&api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleAssignments: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleAssignmentInstance = {};
            result.roleAssignments.push(roleAssignmentInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              roleAssignmentInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              roleAssignmentInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              roleAssignmentInstance.type = typeInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              roleAssignmentInstance.properties = propertiesInstance;
              
              var roleDefinitionIdValue = propertiesValue['roleDefinitionId'];
              if (roleDefinitionIdValue) {
                var roleDefinitionIdInstance = roleDefinitionIdValue;
                propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
              }
              
              var principalIdValue = propertiesValue['principalId'];
              if (principalIdValue) {
                var principalIdInstance = principalIdValue;
                propertiesInstance.principalId = principalIdInstance;
              }
              
              var scopeValue = propertiesValue['scope'];
              if (scopeValue) {
                var scopeInstance = scopeValue;
                propertiesInstance.scope = scopeInstance;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets role assignments of the resource.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {ListAssignmentsFilterParameters} [parametersOrCallback] List
   * operation filters. If null will return all role assignments at, above or
   * below the resource.
   * 
   * @param {Guid} [parametersOrCallback.principalId] Returns role assignment
   * of the specific principal.
   * 
   * @param {boolean} [parametersOrCallback.atScope] This returns all role
   * assignments at or above.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.listForResource = function(resourceGroupName, identity, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    if (parameters) {
      if (parameters.atScope === null || parameters.atScope === undefined) {
        return callback(new Error('parameters.atScope cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '/providers/' + identity.resourceProviderNamespace.trim() + '/' + (identity.parentResourcePath ? identity.parentResourcePath.trim() : '') + '/' + identity.resourceType.trim() + '/' + identity.resourceName.trim() + 'providers/Microsoft.Authorization/roleAssignments?';
    var appendFilter = true;
    if (parameters && parameters.atScope === true) {
      appendFilter = false;
      url2 = url2 + '$filter=atScope()';
    }
    if (parameters && parameters.principalId) {
      url2 = url2 + '&$filter=principalId eq \'' + encodeURIComponent(parameters.principalId) + '\'';
    }
    url2 = url2 + '&api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleAssignments: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleAssignmentInstance = {};
            result.roleAssignments.push(roleAssignmentInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              roleAssignmentInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              roleAssignmentInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              roleAssignmentInstance.type = typeInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              roleAssignmentInstance.properties = propertiesInstance;
              
              var roleDefinitionIdValue = propertiesValue['roleDefinitionId'];
              if (roleDefinitionIdValue) {
                var roleDefinitionIdInstance = roleDefinitionIdValue;
                propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
              }
              
              var principalIdValue = propertiesValue['principalId'];
              if (principalIdValue) {
                var principalIdInstance = principalIdValue;
                propertiesInstance.principalId = principalIdInstance;
              }
              
              var scopeValue = propertiesValue['scope'];
              if (scopeValue) {
                var scopeInstance = scopeValue;
                propertiesInstance.scope = scopeInstance;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets role assignments of the resource group.
   * 
   * @param {string} [resourceGroupName] Resource group name.
   * 
   * @param {ListAssignmentsFilterParameters} [parametersOrCallback] List
   * operation filters. If null will return all role assignments at, above or
   * below the resource group.
   * 
   * @param {Guid} [parametersOrCallback.principalId] Returns role assignment
   * of the specific principal.
   * 
   * @param {boolean} [parametersOrCallback.atScope] This returns all role
   * assignments at or above.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.listForResourceGroup = function(resourceGroupName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters) {
      if (parameters.atScope === null || parameters.atScope === undefined) {
        return callback(new Error('parameters.atScope cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + (resourceGroupName ? resourceGroupName.trim() : '') + '/providers/Microsoft.Authorization/roleAssignments?';
    var appendFilter = true;
    if (parameters && parameters.atScope === true) {
      appendFilter = false;
      url2 = url2 + '$filter=atScope()';
    }
    if (parameters && parameters.principalId) {
      url2 = url2 + '&$filter=principalId eq \'' + encodeURIComponent(parameters.principalId) + '\'';
    }
    url2 = url2 + '&api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleAssignments: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleAssignmentInstance = {};
            result.roleAssignments.push(roleAssignmentInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              roleAssignmentInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              roleAssignmentInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              roleAssignmentInstance.type = typeInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              roleAssignmentInstance.properties = propertiesInstance;
              
              var roleDefinitionIdValue = propertiesValue['roleDefinitionId'];
              if (roleDefinitionIdValue) {
                var roleDefinitionIdInstance = roleDefinitionIdValue;
                propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
              }
              
              var principalIdValue = propertiesValue['principalId'];
              if (principalIdValue) {
                var principalIdInstance = principalIdValue;
                propertiesInstance.principalId = principalIdInstance;
              }
              
              var scopeValue = propertiesValue['scope'];
              if (scopeValue) {
                var scopeInstance = scopeValue;
                propertiesInstance.scope = scopeInstance;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets role assignments of the scope.
   * 
   * @param {string} scope Scope.
   * 
   * @param {ListAssignmentsFilterParameters} [parametersOrCallback] List
   * operation filters. If null will return all role assignments at, above or
   * below the subscription.
   * 
   * @param {Guid} [parametersOrCallback.principalId] Returns role assignment
   * of the specific principal.
   * 
   * @param {boolean} [parametersOrCallback.atScope] This returns all role
   * assignments at or above.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.listForScope = function(scope, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (scope === null || scope === undefined) {
      return callback(new Error('scope cannot be null.'));
    }
    if (parameters) {
      if (parameters.atScope === null || parameters.atScope === undefined) {
        return callback(new Error('parameters.atScope cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + scope.trim() + '/providers/Microsoft.Authorization/roleAssignments?';
    var appendFilter = true;
    if (parameters && parameters.atScope === true) {
      appendFilter = false;
      url2 = url2 + '$filter=atScope()';
    }
    if (parameters && parameters.principalId) {
      url2 = url2 + '&$filter=principalId eq \'' + encodeURIComponent(parameters.principalId) + '\'';
    }
    url2 = url2 + '&api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleAssignments: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleAssignmentInstance = {};
            result.roleAssignments.push(roleAssignmentInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              roleAssignmentInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              roleAssignmentInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              roleAssignmentInstance.type = typeInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              roleAssignmentInstance.properties = propertiesInstance;
              
              var roleDefinitionIdValue = propertiesValue['roleDefinitionId'];
              if (roleDefinitionIdValue) {
                var roleDefinitionIdInstance = roleDefinitionIdValue;
                propertiesInstance.roleDefinitionId = roleDefinitionIdInstance;
              }
              
              var principalIdValue = propertiesValue['principalId'];
              if (principalIdValue) {
                var principalIdInstance = principalIdValue;
                propertiesInstance.principalId = principalIdInstance;
              }
              
              var scopeValue = propertiesValue['scope'];
              if (scopeValue) {
                var scopeInstance = scopeValue;
                propertiesInstance.scope = scopeInstance;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RoleAssignmentOperations;
})();

var RoleDefinitionOperations = ( /** @lends RoleDefinitionOperations */ function() {
  /**
   * @class
   * TBD  (see http://TBD for more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AuthorizationManagementClient] {@link
   * AuthorizationManagementClient~AuthorizationManagementClient}.
   * See [roleDefinitions] {@link
   * AuthorizationManagementClient~AuthorizationManagementClient#roleDefinitions}.
   * Initializes a new instance of the RoleDefinitionOperations class.
   * @constructor
   * 
   * @param {AuthorizationManagementClient} client Reference to the service
   * client.
   */
  function RoleDefinitionOperations(client) {
    this.client = client;
  }
  
  /**
   * Get role definition by name (GUID).
   * 
   * @param {Guid} roleDefinitionName Role definition name (GUID).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleDefinitionOperations.prototype.get = function(roleDefinitionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleDefinitionName === null || roleDefinitionName === undefined) {
      return callback(new Error('roleDefinitionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/providers/Microsoft.Authorization/roleDefinitions/' + roleDefinitionName + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleDefinitionInstance = {};
        result.roleDefinition = roleDefinitionInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          roleDefinitionInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleDefinitionInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          roleDefinitionInstance.type = typeInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = { permissions: [] };
          roleDefinitionInstance.properties = propertiesInstance;
          
          var roleNameValue = propertiesValue['roleName'];
          if (roleNameValue) {
            var roleNameInstance = roleNameValue;
            propertiesInstance.roleName = roleNameInstance;
          }
          
          var descriptionValue = propertiesValue['description'];
          if (descriptionValue) {
            var descriptionInstance = descriptionValue;
            propertiesInstance.description = descriptionInstance;
          }
          
          var scopeValue = propertiesValue['scope'];
          if (scopeValue) {
            var scopeInstance = scopeValue;
            propertiesInstance.scope = scopeInstance;
          }
          
          var typeValue2 = propertiesValue['type'];
          if (typeValue2) {
            var typeInstance2 = typeValue2;
            propertiesInstance.type = typeInstance2;
          }
          
          var permissionsArray = propertiesValue['permissions'];
          if (permissionsArray) {
            for (var loweredIndex1 = 0; loweredIndex1 < permissionsArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var permissionsValue = permissionsArray[loweredIndex1];
              var permissionInstance = { actions: [], notActions: [] };
              propertiesInstance.permissions.push(permissionInstance);
              
              var actionsArray = permissionsValue['actions'];
              if (actionsArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < actionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var actionsValue = actionsArray[loweredIndex2];
                  permissionInstance.actions.push(actionsValue);
                }
              }
              
              var notActionsArray = permissionsValue['notActions'];
              if (notActionsArray) {
                for (var loweredIndex3 = 0; loweredIndex3 < notActionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var notActionsValue = notActionsArray[loweredIndex3];
                  permissionInstance.notActions.push(notActionsValue);
                }
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get role definition by name (GUID).
   * 
   * @param {string} roleDefinitionId Role definition Id
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleDefinitionOperations.prototype.getById = function(roleDefinitionId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleDefinitionId === null || roleDefinitionId === undefined) {
      return callback(new Error('roleDefinitionId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/' + roleDefinitionId.trim() + '?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleDefinitionInstance = {};
        result.roleDefinition = roleDefinitionInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          roleDefinitionInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleDefinitionInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          roleDefinitionInstance.type = typeInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = { permissions: [] };
          roleDefinitionInstance.properties = propertiesInstance;
          
          var roleNameValue = propertiesValue['roleName'];
          if (roleNameValue) {
            var roleNameInstance = roleNameValue;
            propertiesInstance.roleName = roleNameInstance;
          }
          
          var descriptionValue = propertiesValue['description'];
          if (descriptionValue) {
            var descriptionInstance = descriptionValue;
            propertiesInstance.description = descriptionInstance;
          }
          
          var scopeValue = propertiesValue['scope'];
          if (scopeValue) {
            var scopeInstance = scopeValue;
            propertiesInstance.scope = scopeInstance;
          }
          
          var typeValue2 = propertiesValue['type'];
          if (typeValue2) {
            var typeInstance2 = typeValue2;
            propertiesInstance.type = typeInstance2;
          }
          
          var permissionsArray = propertiesValue['permissions'];
          if (permissionsArray) {
            for (var loweredIndex1 = 0; loweredIndex1 < permissionsArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var permissionsValue = permissionsArray[loweredIndex1];
              var permissionInstance = { actions: [], notActions: [] };
              propertiesInstance.permissions.push(permissionInstance);
              
              var actionsArray = permissionsValue['actions'];
              if (actionsArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < actionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var actionsValue = actionsArray[loweredIndex2];
                  permissionInstance.actions.push(actionsValue);
                }
              }
              
              var notActionsArray = permissionsValue['notActions'];
              if (notActionsArray) {
                for (var loweredIndex3 = 0; loweredIndex3 < notActionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var notActionsValue = notActionsArray[loweredIndex3];
                  permissionInstance.notActions.push(notActionsValue);
                }
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get all role definitions.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleDefinitionOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/providers/Microsoft.Authorization/roleDefinitions?';
    url2 = url2 + 'api-version=2014-07-01-preview';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2014-07-01-preview';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleDefinitions: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleDefinitionInstance = {};
            result.roleDefinitions.push(roleDefinitionInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              roleDefinitionInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              roleDefinitionInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              roleDefinitionInstance.type = typeInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = { permissions: [] };
              roleDefinitionInstance.properties = propertiesInstance;
              
              var roleNameValue = propertiesValue['roleName'];
              if (roleNameValue) {
                var roleNameInstance = roleNameValue;
                propertiesInstance.roleName = roleNameInstance;
              }
              
              var descriptionValue = propertiesValue['description'];
              if (descriptionValue) {
                var descriptionInstance = descriptionValue;
                propertiesInstance.description = descriptionInstance;
              }
              
              var scopeValue = propertiesValue['scope'];
              if (scopeValue) {
                var scopeInstance = scopeValue;
                propertiesInstance.scope = scopeInstance;
              }
              
              var typeValue2 = propertiesValue['type'];
              if (typeValue2) {
                var typeInstance2 = typeValue2;
                propertiesInstance.type = typeInstance2;
              }
              
              var permissionsArray = propertiesValue['permissions'];
              if (permissionsArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < permissionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var permissionsValue = permissionsArray[loweredIndex2];
                  var permissionInstance = { actions: [], notActions: [] };
                  propertiesInstance.permissions.push(permissionInstance);
                  
                  var actionsArray = permissionsValue['actions'];
                  if (actionsArray) {
                    for (var loweredIndex3 = 0; loweredIndex3 < actionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var actionsValue = actionsArray[loweredIndex3];
                      permissionInstance.actions.push(actionsValue);
                    }
                  }
                  
                  var notActionsArray = permissionsValue['notActions'];
                  if (notActionsArray) {
                    for (var loweredIndex4 = 0; loweredIndex4 < notActionsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var notActionsValue = notActionsArray[loweredIndex4];
                      permissionInstance.notActions.push(notActionsValue);
                    }
                  }
                }
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RoleDefinitionOperations;
})();
